[
{
"description": "TCP 3-Way Handshake",
"queries": [
"Implies(Eq(IpDst_2, IpSrc_1) & Eq(IpSrc_2, IpDst_1) & Eq(TcpFlags_1, 2) & Eq(TcpFlags_2, 18) & Eq(TcpFlags_3, 16), Eq(TcpSeq_3, TcpAck_2) & Eq(TcpAck_2, TcpSeq_1 + 1) & Eq(TcpAck_3, TcpSeq_2 + 1))"
]
},
{
"description": "PSH-ACK Data Followed by ACK",
"queries": [
"Implies(Eq(IpDst_2, IpSrc_1) & Eq(IpSrc_2, IpDst_1) & Eq(TcpFlags_1, 24) & Eq(Tsval_1, Tsecr_2), Eq(TcpFlags_2, 4) | Eq(TcpFlags_2, 16) | Eq(TcpFlags_2, 17) | Eq(TcpFlags_2, 20) | Eq(TcpFlags_2, 24))"
]
},
{
"description": "FIN-ACK Sequence",
"queries": [
"Implies(Eq(TcpFlags_1, 17) & Eq(Tsval_1, Tsecr_2), Eq(TcpFlags_2, 16) & Eq(TcpAck_2, TcpSeq_1 + 1))"
]
},
{
"description": "Pure ACK Response (No Payload)",
"queries": [
"Implies(Eq(TcpFlags_2, 16) & Eq(TcpLen_2, 0) & Eq(TcpSeq_2, TcpAck_1) & Eq(TcpAck_1, TcpSeq_2), Eq(TcpSeq_2, TcpAck_1))"
]
},
{
"description": "Immediate Retransmission Detection",
"queries": [
"Implies(Eq(IpDst_1, IpDst_2) & Eq(IpSrc_1, IpSrc_2) & Eq(TcpFlags_1, TcpFlags_2) & Eq(TcpLen_1, TcpLen_2) & Eq(TcpSeq_1, TcpSeq_2), Eq(IpSrc_1, IpSrc_2) & Eq(IpDst_1, IpDst_2))",
"Implies(Eq(IpDst_2, IpDst_3) & Eq(IpSrc_2, IpSrc_3) & Eq(TcpFlags_2, TcpFlags_3) & Eq(TcpLen_2, TcpLen_3) & Eq(TcpSeq_2, TcpSeq_3), Eq(IpSrc_3, IpSrc_3) & Eq(IpDst_2, IpDst_3))"
]
},
{
"description": "Duplicate ACK Detection",
"queries": [
"Implies(Eq(TcpAck_1, TcpAck_2) & Eq(TcpAck_2, TcpAck_3) & Eq(TcpFlags_1, 16) & Eq(TcpFlags_2, 16) & Eq(TcpFlags_3, 16), Eq(IpDst_1, IpDst_2) & Eq(IpDst_2, IpDst_3) & Eq(IpSrc_1, IpSrc_2) & Eq(IpSrc_2, IpSrc_3))"
]
},
{
"description": "Timestamp Echo Validation (TSval & TSecr)",
"queries": [
"Implies(Eq(IpDst_2, IpSrc_1) & Eq(IpSrc_2, IpDst_1) & (TcpLen_1 > 0) & (TcpLen_2 > 0), Tsecr_2 <= Tsval_1)"
]
},
{
"description": "IP TTL Sanity Rule",
"queries": [
"And(IpTtl_1 > 0, IpTtl_1 <= 255)",
"And(IpTtl_2 > 0, IpTtl_2 <= 255)",
"And(IpTtl_3 > 0, IpTtl_3 <= 255)"
]
},
{
"description": "IP/TCP Header Length Alignment (Multiple of 4 bytes)",
"queries": [
"Eq(Mod(IpHdrLen_1, 4), 0)",
"Eq(Mod(IpHdrLen_2, 4), 0)",
"Eq(Mod(IpHdrLen_3, 4), 0)",
"Eq(Mod(TcpHdrLen_1, 4), 0)",
"Eq(Mod(TcpHdrLen_2, 4), 0)",
"Eq(Mod(TcpHdrLen_3, 4), 0)"
]
},
{
"description": "Flow Direction Consistency",
"queries": [
"Implies(Eq(IpDst_1, IpSrc_2) & Eq(IpSrc_1, IpDst_2), Eq(TcpDstport_1, TcpSrcport_2) & Eq(TcpSrcport_1, TcpDstport_2))"
]
},
{
"description": "Three-Way Handshake with Timestamp",
"queries": [
"Implies(Eq(TcpFlags_1, 2) & Eq(TcpFlags_2, 18) & Eq(TcpFlags_3, 16) & (Tsval_1 > 0) & (Tsval_2 > 0), Eq(Tsecr_2, Tsval_1) & Eq(Tsecr_3, Tsval_2))"
]
},
{
"description": "IP Header Length and Total Length Consistency",
"queries": [
"Eq(IpLen_1, IpHdrLen_1 + TcpHdrLen_1 + TcpLen_1)"
]
},
{
"description": "Sequence Number Incrementation in Stream",
"queries": [
"Implies(Eq(IpSrc_1, IpDst_2) & Eq(IpSrc_2, IpDst_1) & Eq(Tsecr_2, Tsval_1) & (TcpLen_1 > 0) & (TcpLen_2 > 0), Eq(TcpAck_2, TcpLen_1 + TcpSeq_1))",
"Implies(Eq(IpSrc_2, IpDst_3) & Eq(IpSrc_3, IpDst_2) & Eq(Tsecr_3, Tsval_2) & (TcpLen_2 > 0) & (TcpLen_3 > 0), Eq(TcpAck_3, TcpLen_2 + TcpSeq_2))"
]
},
{
"description": "TCP Phantom Byte for SYN/FIN (len=0)",
"queries": [
"Implies(Eq(IpSrc_1, IpDst_2) & Eq(IpSrc_2, IpDst_1) & Eq(TcpLen_1, 0) & Eq(Tsecr_2, Tsval_1) & (Eq(TcpFlags_1, 1) | Eq(TcpFlags_1, 2) | Eq(TcpFlags_1, 17) | Eq(TcpFlags_1, 18)), Eq(TcpAck_2, TcpSeq_1 + 1))",
"Implies(Eq(IpSrc_2, IpDst_3) & Eq(IpSrc_3, IpDst_2) & Eq(TcpLen_2, 0) & Eq(Tsecr_3, Tsval_2) & (Eq(TcpFlags_2, 1) | Eq(TcpFlags_2, 2) | Eq(TcpFlags_2, 17) | Eq(TcpFlags_2, 18)), Eq(TcpAck_3, TcpSeq_2 + 1))"
]
},
{
"description": "Normal Empty Segment (No SYN/FIN)",
"queries": [
"Implies(Eq(IpSrc_1, IpDst_2) & Eq(IpSrc_2, IpDst_1) & Eq(TcpLen_1, 0) & Eq(Tsecr_2, Tsval_1) & ~(Eq(TcpFlags_1, 1) | Eq(TcpFlags_1, 2) | Eq(TcpFlags_1, 17) | Eq(TcpFlags_1, 18)), Eq(TcpAck_2, TcpSeq_1))",
"Implies(Eq(IpSrc_2, IpDst_3) & Eq(IpSrc_3, IpDst_2) & Eq(TcpLen_2, 0) & Eq(Tsecr_3, Tsval_2) & ~(Eq(TcpFlags_2, 1) | Eq(TcpFlags_2, 2) | Eq(TcpFlags_2, 17) | Eq(TcpFlags_2, 18)), Eq(TcpAck_3, TcpSeq_2))"
]
},
{
"description": "TCP Window Scaling Equation",
"queries": [
"Eq(TcpWindowSizeScalefactor_1*TcpWindowSizeValue_1, TcpWindowSize_1)",
"Eq(TcpWindowSizeScalefactor_2*TcpWindowSizeValue_2, TcpWindowSize_2)",
"Eq(TcpWindowSizeScalefactor_3*TcpWindowSizeValue_3, TcpWindowSize_3)"
]
},
{
"description": "Sequence Number Continuity in Consecutive Packets",
"queries": [
"Implies(Eq(IpDst_1, IpDst_2) & Eq(IpSrc_1, IpSrc_2) & ~(Eq(TcpFlags_1, 1) | Eq(TcpFlags_1, 2) | Eq(TcpFlags_1, 17) | Eq(TcpFlags_1, 18)) & ~(Eq(TcpFlags_2, 1) | Eq(TcpFlags_2, 2) | Eq(TcpFlags_2, 17) | Eq(TcpFlags_2, 18)), TcpSeq_2 >= TcpLen_1 + TcpSeq_1)",
"Implies(Eq(IpDst_2, IpDst_3) & Eq(IpSrc_2, IpSrc_3) & ~(Eq(TcpFlags_2, 1) | Eq(TcpFlags_2, 2) | Eq(TcpFlags_2, 17) | Eq(TcpFlags_2, 18)) & ~(Eq(TcpFlags_3, 1) | Eq(TcpFlags_3, 2) | Eq(TcpFlags_3, 17) | Eq(TcpFlags_3, 18)), TcpSeq_3 >= TcpLen_2 + TcpSeq_2)"
]
}
]